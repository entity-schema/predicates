import { isOneOfSchema } from './oneof-schema';
import { isEntitySchema } from './entity-schema';
import { isRootSchema } from './root-schema';
import { isEnumSchema } from './enum-schema';
import { isRefSchema } from './ref-schema';
import { isChildEntitySchema } from './child-entity-schema';
import { isConstPropertySchema } from './const-property-schema';
import { isEntityReferenceSchema } from './entity-reference-schema';
import { isSubschema } from './subschema';
import { isTypedSchema } from './typed-schema';
import { isObjectSchema } from './object-schema';
import { isStringSchema } from './string-schema';
import { isNumberSchema } from './number-schema';
import { isBooleanSchema } from './boolean-schema';
import { isArraySchema } from './array-schema';
import { isIntegerSchema } from './integer-schema';
import { isSecuritySchema } from './security-schema';
import { isUniquePropertySchema, UniquePropertySchema } from './unique-property-schema';
import { OneOfSchema, EntitySchema, RootSchema, EnumSchema, RefSchema, ChildEntitySchema, ConstPropertySchema, Subschema, TypedSchema, ObjectSchema, StringSchema, NumberSchema, BooleanSchema, ArraySchema, IntegerSchema, SecuritySchema, EntityReferenceSchema } from './types';
export { isOneOfSchema, isEntitySchema, isRootSchema, isEnumSchema, isRefSchema, isChildEntitySchema, isConstPropertySchema, isEntityReferenceSchema, isSubschema, isTypedSchema, isObjectSchema, isStringSchema, isNumberSchema, isBooleanSchema, isArraySchema, isIntegerSchema, isSecuritySchema, isUniquePropertySchema, OneOfSchema, EntitySchema, RootSchema, EnumSchema, RefSchema, ChildEntitySchema, ConstPropertySchema, EntityReferenceSchema, Subschema, TypedSchema, ObjectSchema, StringSchema, NumberSchema, BooleanSchema, ArraySchema, IntegerSchema, SecuritySchema, UniquePropertySchema };
export { assertOneOfSchema } from './oneof-schema';
export { assertEntitySchema } from './entity-schema';
export { assertRootSchema } from './root-schema';
export { assertEnumSchema } from './enum-schema';
export { assertRefSchema } from './ref-schema';
export { assertChildEntitySchema } from './child-entity-schema';
export { assertConstPropertySchema } from './const-property-schema';
export { assertEntityReferenceSchema } from './entity-reference-schema';
export { assertSubschema } from './subschema';
export { assertTypedSchema, assertTypedSchemaOf } from './typed-schema';
export { assertObjectSchema, assertObjectSchemaProperties, assertObjectSchemaProperty } from './object-schema';
export { assertStringSchema } from './string-schema';
export { assertNumberSchema } from './number-schema';
export { assertBooleanSchema } from './boolean-schema';
export { assertArraySchema } from './array-schema';
export { assertIntegerSchema } from './integer-schema';
export { assertSecuritySchema, assertSecuritySchemaRoles } from './security-schema';
export { assertUniquePropertySchema } from './unique-property-schema';
export declare const predicates: {
    oneOfSchema: (value: any) => value is OneOfSchema;
    constPropertySchema: (value: any) => value is ConstPropertySchema;
    stringSchema: (value: any) => value is StringSchema;
    numberSchema: (value: any) => value is NumberSchema;
    integerSchema: (value: any) => value is IntegerSchema;
    booleanSchema: (value: any) => value is BooleanSchema;
    arraySchema: (value: any) => value is ArraySchema;
    childEntitySchema: (value: any) => value is ChildEntitySchema;
    entitySchema: (value: any) => value is EntitySchema;
    entityReferenceSchema: (value: any) => value is EntityReferenceSchema;
    objectSchema: (value: any) => value is ObjectSchema;
    rootSchema: (value: any) => value is RootSchema;
    refSchema: (value: any) => value is RefSchema;
    enumSchema: (value: any) => value is EnumSchema;
    uniquePropertySchema: (value: any) => value is UniquePropertySchema;
    securitySchema: (value: any) => value is SecuritySchema;
    typedSchema: (value: any) => value is TypedSchema;
    subschema: (value: any) => value is Subschema;
    anySchema: (value: any) => value is any;
};
export declare const predicateUtils: {
    isType: (subject: any, typename: string) => boolean;
    isOnly: (subject: any, typename: string) => boolean;
    some: (subject: any, ...typenames: string[]) => boolean;
    every: (subject: any, ...typenames: string[]) => boolean;
    of: (subject: any) => string | undefined;
    allOf: (subject: any) => string[];
    types: () => string[];
};
